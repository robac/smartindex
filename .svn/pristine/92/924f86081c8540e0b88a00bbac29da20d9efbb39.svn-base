<?php

class PageSeeker {
    
    
    
    
    const KEY_DIRS = 'dirs';
    const KEY_PAGES = 'files';
    
    const INFO_NS = 0;
    const INFO_DIR = 1;
    const INFO_FOLLOW = 2;
    
    private $config;
    private $info;
    private $follow;
    
    public function __construct() {
    }
    
    public function get(SmartIndexConf $config) {
        $this->config = $config;
        $data = array();
        
        
        if (auth_quickaclcheck(PageTools::constructPageName($this->config->namespace, "*")) >= AUTH_READ)
            $this->search($data, PageTools::getPageDirFromNamespace("", $this->config->namespace), $this->config->namespace, 1);
    
        return $data;
    }
    
    public function setFollowPath($path) {
        $this->followPath = $path;
    }
    
    private function isInFollowPath($namespace, $dir) {
        $completePath = PageTools::constructPageName($namespace, $dir);
        if (strpos($this->followPath, $completePath) === 0) {
            return true;
        } else {
            return false;
        }
    }
    
    private function checkFollowPath($namespace, $level) {
        if ($this->info[$level-1][self::INFO_FOLLOW] && isset($this->follow[$level]) && ($this->follow[$level]==$namespace)) {
            $this->info[$level][self::INFO_FOLLOW] = true;
            return true;
        } else {
            return false;
        }
    }
    
    private function init() {
        $this->info = array();
        $this->info[1][self::INFO_NS] = $this->config->namespace;
        $this->info[1][self::INFO_DIR] = PageTools::getPageDirFromNamespace($this->config->baseDir, $this->config->namespace);
        $this->info[1][self::INFO_FOLLOW] = true;
        
        $this->follow = explode(PageTools::$NS_SEPARATOR, $this->config->followPath);
        array_unshift($this->follow, NULL);
    }
    
    private function addInfo($level, $dir) {
        $this->info[$level][self::INFO_NS] = PageTools::constructPageName($this->info[$level-1][self::INFO_NS], $dir);
        $this->info[$level][self::INFO_DIR] = $this->info[$level-1][self::INFO_DIR].'/'.$NS_SEPARATOR.$dir;
    }
    
   
    public function _get(SmartIndexConf $config) {
        $this->config = $config;
        $data = array();
        
        $this->init();
        $this->_search($data, 1);
    
        return $data;
    }

    
    private function _search(&$data, $level) {
        $namespace = $this->info[$level][self::INFO_NS];
        $data[$namespace][self::KEY_DIRS] = array();
        $data[$namespace][self::KEY_PAGES] = array();
        
        $pp =  $this->info[$level][self::INFO_DIR];
        $dh = @opendir($this->info[$level][self::INFO_DIR]);
        if (!$dh) return;
        
        while(($file = readdir($dh)) !== false){
            if(preg_match('/^[\._]/',$file)) continue;
            $filePath = $this->info[$level][self::INFO_DIR].'/'.$file;
            if(is_dir($filePath)){
                $data[$namespace][self::KEY_DIRS][] = $file;
                continue;
            }
            $pagename = PageTools::excludePageExtension($file);
            $data[$namespace][self::KEY_PAGES][] = $pagename;
        }
        closedir($dh);
        
        if (($level < $this->config->depth) || $this->info[$level][self::INFO_FOLLOW]) {
            foreach ($data[$namespace][self::KEY_DIRS] as $subdir) {
                $isFollow = $this->checkFollowPath($subdir, $level+1); 
                if (($level < $this->config->depth) || $isFollow) {
                    $this->addInfo($level+1, $subdir);
                    $this->_search($data, $level+1);    
                }
            }
        }
    }

    private function search(&$data, $dir, $namespace, $level) {
        $data[$namespace]["dirs"] = array();
        $data[$namespace]["files"] = array();
        $data[$namespace]["fm"] = array();
        
        $l1 = "";
        $l2 = "";
        PageTools::excludePageNamespaces($namespace, $l1, $l2);
        $pattern = $this->config->nsPage;
        //$pattern = '/'.str_replace("{namespace}", $l2, $pattern).'/i';
        $pattern = str_replace("{namespace}", $l2, $pattern);
        
        //echo $this->config->baseDir.$dir.'\\'.$pattern.".txt<br/>";
        if (file_exists($this->config->baseDir.$dir.'\\'.$pattern.".txt")) {
            $data["headpage"]=array();
            $data["headpage"][] = $pattern;
        }

        $dh = @opendir($this->config->baseDir.'/'.$dir);
        if(!$dh) return;
        
        while(($file = readdir($dh)) !== false){
            if(preg_match('/^[\._]/',$file)) continue;
            $filePath = $this->config->baseDir.$dir.'/'.$file;
            if(is_dir($filePath)){
                $pagex = ($namespace == "") ? $file.":*" : $namespace.":".$file.":*";
                if (auth_quickaclcheck($pagex)<AUTH_READ)
                    continue;
                $data[$namespace]["dirs"][] = $file;
                continue;
            }
            $pagename = PageTools::excludePageExtension($file);
            $page_ns = ($namespace == "") ? $file : $namespace.":".$file;
            if (auth_quickaclcheck($page_ns)>=AUTH_READ) {
                $data[$namespace]["files"][] = $pagename;
                $data[$namespace]["fm"][] = filemtime($filePath);
            }
            
            
            /*if (($l2 != "")&&(preg_match($pattern, $pagename))) {
                //echo "<br/>".$namespace." ".$pagename; 
            }*/
        }
        
        closedir($dh);
        
        sort($data[$namespace]["dirs"]);
        //sort($data[$namespace]["files"]);
        array_multisort($data[$namespace]['fm'], SORT_DESC, $data[$namespace]['files']);

        $isFollow = PageTools::isPathPart($this->config->followPath, PageTools::constructPageName($namespace, $subdir));
        
        if (($level < $this->config->depth) || (!is_null($this->config->followPath))) {
            foreach ($data[$namespace]["dirs"] as $subdir) {
                if (($level < $this->config->depth) || PageTools::isPathPart($this->config->followPath, PageTools::constructPageName($namespace, $subdir)))
                $this->search($data, $dir.DIRECTORY_SEPARATOR.$subdir, PageTools::constructPageName($namespace, $subdir), $level+1);    
            }
        }
        
    }
            
}