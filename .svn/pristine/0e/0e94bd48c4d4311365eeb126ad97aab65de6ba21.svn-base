<?php
/**
 * DokuWiki Plugin test (Syntax Component)
 *
 * @license GPL 2 http://www.gnu.org/licenses/gpl-2.0.html
 * @author  robert poch <robik@poch.cz>
 */

// must be run within Dokuwiki
if (!defined('DOKU_INC')) die();

if (!defined('DOKU_LF')) define('DOKU_LF', "\n");
if (!defined('DOKU_TAB')) define('DOKU_TAB', "\t");
if (!defined('DOKU_PLUGIN')) define('DOKU_PLUGIN',DOKU_INC.'lib/plugins/');

require_once DOKU_PLUGIN.'syntax.php';


function smartindex_autoloader($class) {
    $classpath = dirname(__FILE__).DIRECTORY_SEPARATOR.'classes'.DIRECTORY_SEPARATOR."{$class}.php"; 
    if (file_exists($classpath)) {
        require_once $classpath;
    }
}

spl_autoload_register('smartindex_autoloader');


class syntax_plugin_smartindex extends DokuWiki_Syntax_Plugin {
    public function getType() {
        return 'substition';
    }

    public function getPType() {
        return 'block';
    }

    public function getSort() {
        return 100;
    }


    public function connectTo($mode) {
        //$this->Lexer->addSpecialPattern('<smartindex>', $mode, 'plugin_smartindex');
        $this->Lexer->addSpecialPattern('<smartindex .+?/>', $mode, 'plugin_smartindex');
        
    }


    public function handle($match, $state, $pos, &$handler){
        $config = new SmartIndexConf();
        $config->recursionLevel = 2;
        $config->followPath = $INFO['id']; 
        $config->namespace = '';
        $config->check();
        if (is_null($config->error)) {
            $seeker = new PageSeeker($config);
            $pages = $seeker->get($config);
        }
        
        $data = array();
        $data[0] = $config;
        $data[1] = $pages;
        return $data;
    }
    
    public function removeDirs($dir, $filename) {
        return str_replace("\\", ":", substr($filename, strlen($dir)+1));
    }
    

    public function render($mode, &$renderer, $data) {
        global $conf;
        global $INFO;
        
        if($mode != 'xhtml') 
            return false;
        
        $indexBuilder = new SmartIndexRenderer($data[0]);
        $indexBuilder->setUseWrapper(true, $data[0]->treeId, array("smartindex-treeview smartindex-default"));
        $indexBuilder->render($data[1], $renderer->doc);
               
        return true;
    }
}
